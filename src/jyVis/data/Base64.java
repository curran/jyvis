/******************************************************************************
 * Copyright (C) 2007  Institute for Visualization and Perception Research,
 *                     University of Massachusetts Lowell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *******************************************************************************/
package jyVis.data;

import java.util.BitSet;

/**
 * A utility for encoding and decoding BitSets as strings. The encoding uses
 * base 64 (every 6 bits are represented by 1 character) and is compressed using
 * run-length encoding.
 * 
 * @author Curran Kelleher
 * 
 */

public class Base64 {
	/**
	 * The alphabet used in encoding and decoding
	 */
	static final String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!?[]|:;*()+-";

	/**
	 * The character used to signify a run of 1s.
	 */
	static final char runFlag1Character = '{';

	/**
	 * The character used to signify a run of 0s.
	 */
	static final char runFlag0Character = '}';

	/**
	 * Encodes the specified BitSet into a string using a base 64 encoding. This
	 * means that every 6 bit segment of the BitSet is represented by one
	 * character in the string.
	 * 
	 * @param bitSet
	 *            the BitSet to encode into a String
	 * @return the String encoding of the BitSet
	 */
	public static String encode(BitSet bitSet) {
		StringBuffer b = new StringBuffer();
		boolean finished = false;
		int offset = 0;
		while (!finished) {
			boolean nextBit = bitSet.get(offset);
			int runLength = determineRunLength(bitSet, offset, nextBit);
			if (runLength <= 24) {
				b.append(encodeNext6Bits(bitSet, offset));
				offset += 6;
			} else {
				b.append(nextBit ? runFlag1Character : runFlag0Character);
				b.append(runLength);
				offset += runLength;
			}
			finished = offset >= bitSet.length();
		}
		return b.toString();
	}

	private static int determineRunLength(BitSet bitSet, int offset, boolean b) {
		int bitSetLength = bitSet.length();
		int runLength = 0;
		for (; offset + runLength < bitSetLength; runLength++)
			if (bitSet.get(offset + runLength) != b)
				break;
		return runLength;
	}

	private static char encodeNext6Bits(BitSet bitSet, int offset) {
		int realBits = 0x00000000;
		for (int bit = 0; bit < 6; bit++)
			if (bitSet.get(offset + bit))
				realBits |= (0x00000001 << (5 - bit));
		return alphabet.charAt(realBits);
	}

	/**
	 * Decodes the specified base 64 encoded String to a BitSet.
	 * 
	 * @param s
	 *            the string to decode (which was generated by Base64.encode())
	 * @return the BitSet encoded by the String
	 */
	public static BitSet decode(String s) {
		BitSet bitSet = new BitSet();
		char[] chars = s.toCharArray();
		int offset = 0;
		for (int i = 0; i < chars.length; i++)
			if (chars[i] == runFlag0Character || chars[i] == runFlag1Character) {
				int newI = i + 1;
				while (newI < chars.length)
					if (Character.isDigit(chars[newI]))
						newI++;
					else
						break;
				int runLength = Integer.parseInt(s.substring(i + 1, newI));
				offset += runLength;
				if (chars[i] == runFlag1Character)
					for (int j = offset - runLength; j < offset; j++)
						bitSet.set(j);
				i = newI - 1;
			} else {
				int realBits = alphabet.indexOf(chars[i]);
				for (int bit = 0; bit < 6; bit++)
					if ((realBits & (0x00000001 << (5 - bit))) != 0)
						bitSet.set(offset + bit);
				offset += 6;
			}
		return bitSet;
	}
}
/*
 * CVS Log
 * 
 * $Log: Base64.java,v $
 * Revision 1.1  2007/08/15 17:59:10  curran
 * Initial commit to SourceForge
 * Revision 1.1 2007/07/26 00:30:58 ckellehe Initial
 * Creation
 * 
 * Revision 1.3 2007/06/12 20:00:48 ckellehe Fixed the bug where the base64 was
 * crashing when attempting to encode a bit set that had all of it's bits set to
 * true Revision 1.2 2007/06/08 15:01:44 ckellehe Initial Creation
 * 
 */
